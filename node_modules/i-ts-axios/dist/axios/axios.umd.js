(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.axios = factory());
}(this, (function () { 'use strict';

    var toString = Object.prototype.toString;
    function isDate(val) {
        return toString.call(val) === '[object Date]';
    }
    function isPlainObject(val) {
        return toString.call(val) === '[object Object]';
    }
    function extend(to, from) {
        for (var key in from) {
            to[key] = from[key];
        }
        return to;
    }

    function encode(val) {
        return encodeURIComponent(val)
            .replace('/%40/g', '@')
            .replace('/%3A/ig', ':')
            .replace('/%24/g', '$')
            .replace('/%2C/ig', ',')
            .replace('/%20/g', '+')
            .replace('/%5B/g', '[')
            .replace('/%5D/g', ']');
    }
    function buildURL(url, params) {
        if (!params)
            return url;
        var parts = [];
        Object.keys(params).forEach(function (key) {
            var val = params[key];
            if (val === null || typeof val === 'undefined')
                return;
            var values = [];
            if (Array.isArray(val)) {
                values = val;
                key += '[]';
            }
            else {
                values = [val];
            }
            values.forEach(function (val) {
                if (isDate(val)) {
                    val = val.toISOString();
                }
                else if (isPlainObject(val)) {
                    val = JSON.stringify(val);
                }
                parts.push(encode(key) + "=" + encode(val));
            });
        });
        var serializedParams = parts.join('&');
        if (serializedParams) {
            var markIndex = url.indexOf('#');
            if (markIndex !== -1) {
                url = url.slice(0, markIndex);
            }
            url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
        }
        return url;
    }

    function transfromRequest(data) {
        if (isPlainObject(data))
            return JSON.stringify(data);
        return data;
    }
    function transfromResponse(data) {
        if (typeof data === 'string') {
            try {
                data = JSON.parse(data);
            }
            catch (e) {
                // do nothing
            }
        }
        return data;
    }

    function normalizeHeaderName(headers, normalizedName) {
        if (!headers)
            return;
        Object.keys(headers).forEach(function (name) {
            if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                headers[normalizedName] = headers[name];
                delete headers[name];
            }
        });
    }
    function processHeaders(headers, data) {
        normalizeHeaderName(headers, 'Content-Type');
        if (isPlainObject(data)) {
            if (headers && !headers['Content-Type']) {
                headers['Content-Type'] = 'application/json;charset=utf-8';
            }
        }
        return headers;
    }
    function parseHeaders(headers) {
        var parsed = Object.create(null);
        if (!headers)
            return parsed;
        headers.split('\r\n').forEach(function (line) {
            var _a = line.split(':'), key = _a[0], val = _a[1];
            key = key.trim().toLowerCase();
            if (!key)
                return;
            if (val)
                val = val.trim();
            parsed[key] = val;
        });
        return parsed;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var AxiosError = /** @class */ (function (_super) {
        __extends(AxiosError, _super);
        function AxiosError(message, config, code, request, response) {
            var _this = _super.call(this, message) || this;
            _this.config = config;
            _this.code = code;
            _this.request = request;
            _this.response = response;
            _this.isAxiosError = true;
            Object.setPrototypeOf(_this, AxiosError.prototype);
            return _this;
        }
        return AxiosError;
    }(Error));
    function createError(message, config, code, request, response) {
        var error = new AxiosError(message, config, code, request, response);
        return error;
    }

    function xhr(config) {
        return new Promise(function (resolve, reject) {
            var _a = config.data, data = _a === void 0 ? null : _a, url = config.url, _b = config.method, method = _b === void 0 ? 'get' : _b, headers = config.headers, responseType = config.responseType, timeout = config.timeout;
            var request = new XMLHttpRequest();
            // 响应值类型
            if (responseType) {
                request.responseType = responseType;
            }
            if (timeout) {
                request.timeout = timeout;
            }
            request.open(method.toLocaleUpperCase(), url, true);
            // 监听状态变化
            request.onreadystatechange = function handleLoad() {
                if (request.readyState !== 4)
                    return;
                var responseHeaders = parseHeaders(request.getAllResponseHeaders());
                var responseData = responseType !== 'text' ? request.response : request.responseText;
                var response = {
                    data: responseData,
                    status: request.status,
                    statusText: request.statusText,
                    headers: responseHeaders,
                    config: config,
                    request: request
                };
                if (request.status === 0)
                    return;
                handleResponse(response);
            };
            // 错误处理
            request.onerror = function handleError() {
                reject(createError('Network Error', config, null, request));
            };
            // 超时处理
            request.ontimeout = function handleTimeout() {
                reject(createError("Timeout of " + timeout + " ms exceeded", config, 'ECONNABORTED', request));
            };
            Object.keys(headers).forEach(function (name) {
                if (data === null && name.toLowerCase() === 'content-type') {
                    delete headers[name];
                }
                else {
                    request.setRequestHeader(name, headers[name]);
                }
            });
            request.send(data);
            function handleResponse(response) {
                if (response.status >= 200 && response.status < 300) {
                    resolve(response);
                }
                else {
                    reject(createError("Request failed with status code " + response.status, config, null, request, response));
                }
            }
        });
    }

    function dispatchRequest(config) {
        processConfig(config);
        return xhr(config).then(function (res) {
            return transformResponseData(res);
        });
    }
    function processConfig(config) {
        config.url = transformURL(config);
        config.headers = transformRequestHeaders(config);
        config.data = transformRequestData(config);
    }
    function transformURL(config) {
        var url = config.url, params = config.params;
        return buildURL(url, params);
    }
    function transformRequestData(config) {
        return transfromRequest(config.data);
    }
    function transformRequestHeaders(config) {
        var data = config.data, _a = config.headers, headers = _a === void 0 ? {} : _a;
        return processHeaders(headers, data);
    }
    function transformResponseData(res) {
        res.data = transfromResponse(res.data);
        return res;
    }

    var InterceptorManagers = /** @class */ (function () {
        function InterceptorManagers() {
            this.interceptor = [];
        }
        InterceptorManagers.prototype.use = function (resolved, rejected) {
            this.interceptor.push({
                resolved: resolved,
                rejected: rejected
            });
            return this.interceptor.length - 1;
        };
        InterceptorManagers.prototype.eject = function (id) {
            if (this.interceptor[id]) {
                this.interceptor[id] = null;
            }
        };
        InterceptorManagers.prototype.forEach = function (fn) {
            this.interceptor.forEach(function (interceptor) {
                if (interceptor !== null) {
                    fn(interceptor);
                }
            });
        };
        return InterceptorManagers;
    }());

    var Axios = /** @class */ (function () {
        function Axios() {
            this.interceptors = {
                request: new InterceptorManagers(),
                response: new InterceptorManagers()
            };
        }
        Axios.prototype.request = function (url, config) {
            if (typeof url === 'string') {
                if (!config)
                    config = {};
                config.url = url;
            }
            else {
                config = url;
            }
            // 调用链
            var chain = [
                {
                    resolved: dispatchRequest,
                    rejected: undefined
                }
            ];
            this.interceptors.request.forEach(function (interceptor) {
                chain.unshift(interceptor);
            });
            this.interceptors.response.forEach(function (interceptor) {
                chain.push(interceptor);
            });
            //
            var promise = Promise.resolve(config);
            while (chain.length) {
                var _a = chain.shift(), resolved = _a.resolved, rejected = _a.rejected;
                promise = promise.then(resolved, rejected);
            }
            return promise;
        };
        Axios.prototype.get = function (url, config) {
            return this._requestMethodWithoutData('get', url, config);
        };
        Axios.prototype.delete = function (url, config) {
            return this._requestMethodWithoutData('delete', url, config);
        };
        Axios.prototype.post = function (url, data, config) {
            return this._requestMethodWithData('post', url, data, config);
        };
        Axios.prototype.put = function (url, data, config) {
            return this._requestMethodWithData('put', url, data, config);
        };
        Axios.prototype.patch = function (url, data, config) {
            return this._requestMethodWithData('patch', url, data, config);
        };
        Axios.prototype._requestMethodWithoutData = function (method, url, config) {
            return this.request(Object.assign(config || {}, {
                url: url,
                method: method
            }));
        };
        Axios.prototype._requestMethodWithData = function (method, url, data, config) {
            return this.request(Object.assign(config || {}, {
                url: url,
                method: method,
                data: data
            }));
        };
        return Axios;
    }());

    function createInstance() {
        var context = new Axios();
        // 这样instance就指向了request方法，且上下文指向context，所以可以直接以 instance(option) 方式调用
        // Axios.prototype.request 内对第一个参数的数据类型判断，使我们能够以 instance(url, option) 方式调用
        var instance = Axios.prototype.request.bind(context);
        extend(instance, context);
        return instance;
    }
    var axios = createInstance();

    return axios;

})));
//# sourceMappingURL=axios.umd.js.map
